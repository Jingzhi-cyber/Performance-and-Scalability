#include <pthread.h>

#include "Server.hpp"
#include "client.hpp"
#define MAX_THREAD 90
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void * handleRequest(void * arg) {
  std::string port_raw = "12345";
  size_t port_num = std::stoul(port_raw);

  Client client = Client(port_num, "vcm-30576.vm.duke.edu");

  int id = rand() % 1000 + 1;
  std::cout << "current account id : " << id << std::endl;
  std::stringstream ss;
  ss << "173\n"
     << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
     << "<create>\n"
     << "<account id=\"" << id << "\" balance=\"50000\"/>\n"
     << "<symbol sym=\"SPY\">"
     << "<account id=\"" << id << "\">200</account>\n"
     << "</symbol>\n"
     << "</create>\n";

  string msg = ss.str();

  client.sendRequest(msg.c_str(), msg.size());

  std::string response = client.recvResponse();
  return NULL;
}

int id = 0;

int main(int argc, char ** argv) {
  srand((unsigned int)time(NULL));
  int threads[MAX_THREAD];
  pthread_attr_t thread_attr[MAX_THREAD];
  pthread_t thread_ids[MAX_THREAD];

  for (int i = 0; i < MAX_THREAD; ++i) {
    int ret = pthread_create(&thread_ids[i], NULL, handleRequest, NULL);
    if (ret != 0) {
      std::cout << "pthread create error" << std::endl;
    }
    usleep(1000);
  }

  // for (int i = 0; i < MAX_THREAD; ++i) {
  //   pthread_join(thread_ids[i], NULL);
  // }
  sleep(2);
  return 0;
}
